JavaScript String Methods: A Comprehensive Guide
Strings are one of the most commonly used data types in JavaScript, and the language provides a wide range of built-in methods to manipulate and interact with them. Whether you're formatting text, extracting substrings, or performing search operations, JavaScript's string methods have you covered. Let's dive into some of the most essential ones.

1. Length Property
The length property isn't a method but is frequently used to determine the number of characters in a string.

javascript
Copy code
const text = "Hello, World!";
console.log(text.length); // Output: 13
2. Changing Case
toUpperCase(): Converts a string to uppercase.
toLowerCase(): Converts a string to lowercase.
javascript
Copy code
const message = "JavaScript is fun!";
console.log(message.toUpperCase()); // Output: "JAVASCRIPT IS FUN!"
console.log(message.toLowerCase()); // Output: "javascript is fun!"
3. Extracting Substrings
slice(start, end): Extracts a section of a string and returns it as a new string.
substring(start, end): Similar to slice, but doesn't accept negative indices.
substr(start, length): Extracts a substring based on a starting index and a length (deprecated, but still in use).
javascript
Copy code
const text = "JavaScript";
console.log(text.slice(0, 4));    // Output: "Java"
console.log(text.substring(4, 10)); // Output: "Script"
console.log(text.substr(4, 6));    // Output: "Script"
4. Searching and Finding
indexOf(searchValue): Finds the first occurrence of a substring.
lastIndexOf(searchValue): Finds the last occurrence of a substring.
includes(searchValue): Checks if a string contains a specified substring.
startsWith(searchValue): Checks if a string starts with a specified substring.
endsWith(searchValue): Checks if a string ends with a specified substring.
javascript
Copy code
const sentence = "JavaScript is amazing!";
console.log(sentence.indexOf("is"));       // Output: 11
console.log(sentence.lastIndexOf("a"));   // Output: 16
console.log(sentence.includes("amazing")); // Output: true
console.log(sentence.startsWith("Java")); // Output: true
console.log(sentence.endsWith("ing!"));   // Output: true
5. Replacing Content
replace(searchValue, newValue): Replaces the first match of a substring.
replaceAll(searchValue, newValue): Replaces all matches of a substring.
javascript
Copy code
const sentence = "JavaScript is awesome. JavaScript is powerful.";
console.log(sentence.replace("JavaScript", "JS")); // Output: "JS is awesome. JavaScript is powerful."
console.log(sentence.replaceAll("JavaScript", "JS")); // Output: "JS is awesome. JS is powerful."
6. Splitting and Joining
split(delimiter): Splits a string into an array of substrings based on a delimiter.
join(delimiter): Joins an array of strings into a single string.
javascript
Copy code
const data = "apple,banana,cherry";
const fruits = data.split(",");
console.log(fruits); // Output: ["apple", "banana", "cherry"]

const newString = fruits.join(" - ");
console.log(newString); // Output: "apple - banana - cherry"
7. Trimming Whitespaces
trim(): Removes whitespace from both ends of a string.
trimStart(): Removes whitespace from the start of a string.
trimEnd(): Removes whitespace from the end of a string.
javascript
Copy code
const messy = "   Clean me up!   ";
console.log(messy.trim());       // Output: "Clean me up!"
console.log(messy.trimStart());  // Output: "Clean me up!   "
console.log(messy.trimEnd());    // Output: "   Clean me up!"
8. Repeating Strings
repeat(count): Repeats a string count times.
javascript
Copy code
const word = "Hello ";
console.log(word.repeat(3)); // Output: "Hello Hello Hello "
9. Template Literals
While not a method, template literals allow easy string interpolation and multi-line strings.

javascript
Copy code
const name = "Alice";
const age = 25;
console.log(`My name is ${name}, and I am ${age} years old.`);
